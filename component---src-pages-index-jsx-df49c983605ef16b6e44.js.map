{"version":3,"file":"component---src-pages-index-jsx-df49c983605ef16b6e44.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/components/plasmic/rva_new/PlasmicCtaBottom.jsx","webpack://gatsby-starter-default/./src/components/plasmic/rva_new/PlasmicCtaBottom.module.css","webpack://gatsby-starter-default/./src/components/CtaBottom.jsx","webpack://gatsby-starter-default/./src/components/plasmic/rva_new/PlasmicFig.jsx","webpack://gatsby-starter-default/./src/components/plasmic/rva_new/PlasmicFig.module.css","webpack://gatsby-starter-default/./src/components/Fig.jsx","webpack://gatsby-starter-default/./src/components/plasmic/rva_new/images/rvaTriangle2Png.png","webpack://gatsby-starter-default/./src/components/plasmic/rva_new/PlasmicHome.jsx","webpack://gatsby-starter-default/./src/components/plasmic/rva_new/PlasmicHome.module.css","webpack://gatsby-starter-default/./src/pages/index.jsx"],"sourcesContent":["// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\n/** @jsxRuntime classic */\n/** @jsx createPlasmicElementProxy */\n/** @jsxFrag React.Fragment */\n// This class is auto-generated by Plasmic; please do not edit!\n// Plasmic Project: sSe8AoDiAW5DkmycE76RKb\n// Component: aZrFk0trqYG6jU\nimport * as React from \"react\"\nimport * as p from \"@plasmicapp/react-web\"\nimport * as ph from \"@plasmicapp/host\"\nimport {\n  classNames,\n  createPlasmicElementProxy,\n  deriveRenderOpts,\n} from \"@plasmicapp/react-web\"\nimport Button from \"../../Button\" // plasmic-import: AI4dzLfJKZOBy/component\nimport \"@plasmicapp/react-web/lib/plasmic.css\"\nimport * as projectcss from \"./plasmic_rva_new.module.css\" // plasmic-import: sSe8AoDiAW5DkmycE76RKb/projectcss\nimport * as sty from \"./PlasmicCtaBottom.module.css\" // plasmic-import: aZrFk0trqYG6jU/css\n\nexport const PlasmicCtaBottom__VariantProps = new Array()\n\nexport const PlasmicCtaBottom__ArgProps = new Array()\n\nfunction PlasmicCtaBottom__RenderFunc(props) {\n  const { variants, overrides, forNode } = props\n  const $ctx = ph.useDataEnv?.() || {}\n  const args = React.useMemo(() => Object.assign({}, props.args), [props.args])\n  const $props = args\n  return (\n    <div\n      data-plasmic-name={\"root\"}\n      data-plasmic-override={overrides.root}\n      data-plasmic-root={true}\n      data-plasmic-for-node={forNode}\n      className={classNames(\n        projectcss.all,\n        projectcss.root_reset,\n        projectcss.plasmic_default_styles,\n        projectcss.plasmic_mixins,\n        projectcss.plasmic_tokens,\n        sty.root\n      )}\n    >\n      <p.Stack\n        as={\"div\"}\n        data-plasmic-name={\"container\"}\n        data-plasmic-override={overrides.container}\n        hasGap={true}\n        className={classNames(projectcss.all, sty.container)}\n      >\n        <h2\n          data-plasmic-name={\"h2\"}\n          data-plasmic-override={overrides.h2}\n          className={classNames(\n            projectcss.all,\n            projectcss.h2,\n            projectcss.__wab_text,\n            sty.h2\n          )}\n        >\n          {\"Make a call to action.\"}\n        </h2>\n\n        <Button\n          data-plasmic-name={\"button\"}\n          data-plasmic-override={overrides.button}\n          className={classNames(\"__wab_instance\", sty.button)}\n          color={\"blackCoffee\"}\n        >\n          {\"Get In Touch\"}\n        </Button>\n      </p.Stack>\n    </div>\n  )\n}\n\nconst PlasmicDescendants = {\n  root: [\"root\", \"container\", \"h2\", \"button\"],\n  container: [\"container\", \"h2\", \"button\"],\n  h2: [\"h2\"],\n  button: [\"button\"],\n}\n\nfunction makeNodeComponent(nodeName) {\n  const func = function (props) {\n    const { variants, args, overrides } = React.useMemo(\n      () =>\n        deriveRenderOpts(props, {\n          name: nodeName,\n          descendantNames: [...PlasmicDescendants[nodeName]],\n          internalArgPropNames: PlasmicCtaBottom__ArgProps,\n          internalVariantPropNames: PlasmicCtaBottom__VariantProps,\n        }),\n\n      [props, nodeName]\n    )\n\n    return PlasmicCtaBottom__RenderFunc({\n      variants,\n      args,\n      overrides,\n      forNode: nodeName,\n    })\n  }\n  if (nodeName === \"root\") {\n    func.displayName = \"PlasmicCtaBottom\"\n  } else {\n    func.displayName = `PlasmicCtaBottom.${nodeName}`\n  }\n  return func\n}\n\nexport const PlasmicCtaBottom = Object.assign(\n  // Top-level PlasmicCtaBottom renders the root element\n  makeNodeComponent(\"root\"),\n  {\n    // Helper components rendering sub-elements\n    container: makeNodeComponent(\"container\"),\n    h2: makeNodeComponent(\"h2\"),\n    button: makeNodeComponent(\"button\"),\n    // Metadata about props expected for PlasmicCtaBottom\n    internalVariantProps: PlasmicCtaBottom__VariantProps,\n    internalArgProps: PlasmicCtaBottom__ArgProps,\n  }\n)\n\nexport default PlasmicCtaBottom\n/* prettier-ignore-end */\n","// extracted by mini-css-extract-plugin\nexport var button = \"PlasmicCtaBottom-module--button--yvbv7\";\nexport var container = \"PlasmicCtaBottom-module--container--IEZoT\";\nexport var h2 = \"PlasmicCtaBottom-module--h2--HIbGy\";\nexport var root = \"PlasmicCtaBottom-module--root--BaEkG\";\nexport var svg__pyKfL = \"PlasmicCtaBottom-module--svg__pyKfL--ecrFT\";\nexport var svg__sr3S = \"PlasmicCtaBottom-module--svg__sr3S--8N2Tv\";","// This is a skeleton starter React component generated by Plasmic.\n// This file is owned by you, feel free to edit as you see fit.\nimport * as React from \"react\"\nimport { PlasmicCtaBottom } from \"./plasmic/rva_new/PlasmicCtaBottom\"\n\nfunction CtaBottom_(props, ref) {\n  // Use PlasmicCtaBottom to render this component as it was\n  // designed in Plasmic, by activating the appropriate variants,\n  // attaching the appropriate event handlers, etc.  You\n  // can also install whatever React hooks you need here to manage state or\n  // fetch data.\n  //\n  // Props you can pass into PlasmicCtaBottom are:\n  // 1. Variants you want to activate,\n  // 2. Contents for slots you want to fill,\n  // 3. Overrides for any named node in the component to attach behavior and data,\n  // 4. Props to set on the root node.\n  //\n  // By default, we are just piping all CtaBottomProps here, but feel free\n  // to do whatever works for you.\n  return <PlasmicCtaBottom root={{ ref }} {...props} />\n}\n\nconst CtaBottom = React.forwardRef(CtaBottom_)\n\nexport default CtaBottom\n","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\n/** @jsxRuntime classic */\n/** @jsx createPlasmicElementProxy */\n/** @jsxFrag React.Fragment */\n// This class is auto-generated by Plasmic; please do not edit!\n// Plasmic Project: sSe8AoDiAW5DkmycE76RKb\n// Component: _DbnGlNkMg\nimport * as React from \"react\"\nimport * as ph from \"@plasmicapp/host\"\nimport {\n  classNames,\n  createPlasmicElementProxy,\n  deriveRenderOpts,\n} from \"@plasmicapp/react-web\"\nimport \"@plasmicapp/react-web/lib/plasmic.css\"\nimport * as projectcss from \"./plasmic_rva_new.module.css\" // plasmic-import: sSe8AoDiAW5DkmycE76RKb/projectcss\nimport * as sty from \"./PlasmicFig.module.css\" // plasmic-import: _DbnGlNkMg/css\n\nexport const PlasmicFig__VariantProps = new Array()\n\nexport const PlasmicFig__ArgProps = new Array()\n\nfunction PlasmicFig__RenderFunc(props) {\n  const { variants, overrides, forNode } = props\n  const $ctx = ph.useDataEnv?.() || {}\n  const args = React.useMemo(() => Object.assign({}, props.args), [props.args])\n  const $props = args\n  return (\n    <div\n      data-plasmic-name={\"root\"}\n      data-plasmic-override={overrides.root}\n      data-plasmic-root={true}\n      data-plasmic-for-node={forNode}\n      className={classNames(\n        projectcss.all,\n        projectcss.root_reset,\n        projectcss.plasmic_default_styles,\n        projectcss.plasmic_mixins,\n        projectcss.plasmic_tokens,\n        sty.root\n      )}\n    />\n  )\n}\n\nconst PlasmicDescendants = {\n  root: [\"root\"],\n}\n\nfunction makeNodeComponent(nodeName) {\n  const func = function (props) {\n    const { variants, args, overrides } = React.useMemo(\n      () =>\n        deriveRenderOpts(props, {\n          name: nodeName,\n          descendantNames: [...PlasmicDescendants[nodeName]],\n          internalArgPropNames: PlasmicFig__ArgProps,\n          internalVariantPropNames: PlasmicFig__VariantProps,\n        }),\n\n      [props, nodeName]\n    )\n\n    return PlasmicFig__RenderFunc({\n      variants,\n      args,\n      overrides,\n      forNode: nodeName,\n    })\n  }\n  if (nodeName === \"root\") {\n    func.displayName = \"PlasmicFig\"\n  } else {\n    func.displayName = `PlasmicFig.${nodeName}`\n  }\n  return func\n}\n\nexport const PlasmicFig = Object.assign(\n  // Top-level PlasmicFig renders the root element\n  makeNodeComponent(\"root\"),\n  {\n    // Helper components rendering sub-elements\n    // Metadata about props expected for PlasmicFig\n    internalVariantProps: PlasmicFig__VariantProps,\n    internalArgProps: PlasmicFig__ArgProps,\n  }\n)\n\nexport default PlasmicFig\n/* prettier-ignore-end */\n","// extracted by mini-css-extract-plugin\nexport var root = \"PlasmicFig-module--root--koVA8\";","// This is a skeleton starter React component generated by Plasmic.\n// This file is owned by you, feel free to edit as you see fit.\nimport * as React from \"react\"\nimport { PlasmicFig } from \"./plasmic/rva_new/PlasmicFig\"\n\nfunction Fig_(props, ref) {\n  // Use PlasmicFig to render this component as it was\n  // designed in Plasmic, by activating the appropriate variants,\n  // attaching the appropriate event handlers, etc.  You\n  // can also install whatever React hooks you need here to manage state or\n  // fetch data.\n  //\n  // Props you can pass into PlasmicFig are:\n  // 1. Variants you want to activate,\n  // 2. Contents for slots you want to fill,\n  // 3. Overrides for any named node in the component to attach behavior and data,\n  // 4. Props to set on the root node.\n  //\n  // By default, we are just piping all FigProps here, but feel free\n  // to do whatever works for you.\n  return <PlasmicFig root={{ ref }} {...props} />\n}\n\nconst Fig = React.forwardRef(Fig_)\n\nexport default Fig\n","export default __webpack_public_path__ + \"static/rvaTriangle2Png-c7ea9506d89f47d3dc10846530235ab1.png\";","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\n/** @jsxRuntime classic */\n/** @jsx createPlasmicElementProxy */\n/** @jsxFrag React.Fragment */\n// This class is auto-generated by Plasmic; please do not edit!\n// Plasmic Project: sSe8AoDiAW5DkmycE76RKb\n// Component: HkG6nEWkUxGK_\nimport * as React from \"react\"\nimport * as p from \"@plasmicapp/react-web\"\nimport * as ph from \"@plasmicapp/host\"\nimport {\n  classNames,\n  createPlasmicElementProxy,\n  deriveRenderOpts,\n} from \"@plasmicapp/react-web\"\nimport Header from \"../../Header\" // plasmic-import: rlLZVswJyeOUp/component\nimport Fig from \"../../Fig\" // plasmic-import: _DbnGlNkMg/component\nimport CtaBottom from \"../../CtaBottom\" // plasmic-import: aZrFk0trqYG6jU/component\nimport Footer from \"../../Footer\" // plasmic-import: aKMJC5Su_PgNb/component\nimport \"@plasmicapp/react-web/lib/plasmic.css\"\nimport * as projectcss from \"./plasmic_rva_new.module.css\" // plasmic-import: sSe8AoDiAW5DkmycE76RKb/projectcss\nimport * as sty from \"./PlasmicHome.module.css\" // plasmic-import: HkG6nEWkUxGK_/css\nimport rvaTriangle2PngZCIWyJrt from \"./images/rvaTriangle2Png.png\" // plasmic-import: zC_IWyJRT/picture\n\nexport const PlasmicHome__VariantProps = new Array()\n\nexport const PlasmicHome__ArgProps = new Array()\n\nfunction PlasmicHome__RenderFunc(props) {\n  const { variants, overrides, forNode } = props\n  const $ctx = ph.useDataEnv?.() || {}\n  const args = React.useMemo(() => Object.assign({}, props.args), [props.args])\n  const $props = args\n  return (\n    <React.Fragment>\n      <style>{`\n        body {\n          margin: 0;\n        }\n      `}</style>\n\n      <div className={projectcss.plasmic_page_wrapper}>\n        <p.Stack\n          as={\"div\"}\n          data-plasmic-name={\"root\"}\n          data-plasmic-override={overrides.root}\n          data-plasmic-root={true}\n          data-plasmic-for-node={forNode}\n          hasGap={true}\n          className={classNames(\n            projectcss.all,\n            projectcss.root_reset,\n            projectcss.plasmic_default_styles,\n            projectcss.plasmic_mixins,\n            projectcss.plasmic_tokens,\n            sty.root\n          )}\n        >\n          <Header\n            data-plasmic-name={\"header\"}\n            data-plasmic-override={overrides.header}\n            className={classNames(\"__wab_instance\", sty.header)}\n          />\n\n          {true ? (\n            <div\n              data-plasmic-name={\"hero\"}\n              data-plasmic-override={overrides.hero}\n              className={classNames(projectcss.all, sty.hero)}\n            >\n              <p.PlasmicImg\n                alt={\"\"}\n                className={classNames(sty.img__ab4Ic)}\n                displayHeight={\"665px\"}\n                displayMaxHeight={\"none\"}\n                displayMaxWidth={\"100%\"}\n                displayMinHeight={\"0\"}\n                displayMinWidth={\"0\"}\n                displayWidth={\"auto\"}\n                loading={\"lazy\"}\n                src={{\n                  src: rvaTriangle2PngZCIWyJrt,\n                  fullWidth: 958,\n                  fullHeight: 677,\n                  aspectRatio: undefined,\n                }}\n              />\n\n              <Fig\n                data-plasmic-name={\"triangle\"}\n                data-plasmic-override={overrides.triangle}\n                className={classNames(\"__wab_instance\", sty.triangle)}\n              />\n            </div>\n          ) : null}\n          {true ? (\n            <div\n              data-plasmic-name={\"companiesSection\"}\n              data-plasmic-override={overrides.companiesSection}\n              className={classNames(projectcss.all, sty.companiesSection)}\n            >\n              <p.Stack\n                as={\"div\"}\n                data-plasmic-name={\"container2\"}\n                data-plasmic-override={overrides.container2}\n                hasGap={true}\n                className={classNames(projectcss.all, sty.container2)}\n              >\n                <h2\n                  data-plasmic-name={\"h2\"}\n                  data-plasmic-override={overrides.h2}\n                  className={classNames(\n                    projectcss.all,\n                    projectcss.h2,\n                    projectcss.__wab_text,\n                    sty.h2\n                  )}\n                >\n                  {\"We work with local businesses\"}\n                </h2>\n\n                <div\n                  className={classNames(projectcss.all, sty.freeBox___4Hayf)}\n                >\n                  <p.Stack\n                    as={\"div\"}\n                    hasGap={true}\n                    className={classNames(projectcss.all, sty.freeBox__ycGip)}\n                  >\n                    <p.PlasmicImg\n                      alt={\"\"}\n                      className={classNames(sty.img__faU7H)}\n                      displayHeight={\"48px\"}\n                      displayMaxHeight={\"none\"}\n                      displayMaxWidth={\"none\"}\n                      displayMinHeight={\"0\"}\n                      displayMinWidth={\"0\"}\n                      displayWidth={\"auto\"}\n                      src={\n                        \"https://plasmic-ray.s3.us-west-2.amazonaws.com/logo-strapi.svg\"\n                      }\n                    />\n\n                    <p.PlasmicImg\n                      alt={\"\"}\n                      className={classNames(sty.img__fjh8N)}\n                      displayHeight={\"48px\"}\n                      displayMaxHeight={\"none\"}\n                      displayMaxWidth={\"none\"}\n                      displayMinHeight={\"0\"}\n                      displayMinWidth={\"0\"}\n                      displayWidth={\"auto\"}\n                      src={\n                        \"https://plasmic-ray.s3.us-west-2.amazonaws.com/logo-segment.svg\"\n                      }\n                    />\n\n                    <p.PlasmicImg\n                      alt={\"\"}\n                      className={classNames(sty.img__nGvoU)}\n                      displayHeight={\"48px\"}\n                      displayMaxHeight={\"none\"}\n                      displayMaxWidth={\"none\"}\n                      displayMinHeight={\"0\"}\n                      displayMinWidth={\"0\"}\n                      displayWidth={\"auto\"}\n                      src={\n                        \"https://plasmic-ray.s3.us-west-2.amazonaws.com/logo-xstate.svg\"\n                      }\n                    />\n\n                    <p.PlasmicImg\n                      alt={\"\"}\n                      className={classNames(sty.img___0DcrR)}\n                      displayHeight={\"48px\"}\n                      displayMaxHeight={\"none\"}\n                      displayMaxWidth={\"none\"}\n                      displayMinHeight={\"0\"}\n                      displayMinWidth={\"0\"}\n                      displayWidth={\"auto\"}\n                      src={\n                        \"https://plasmic-ray.s3.us-west-2.amazonaws.com/logo-mapbox.svg\"\n                      }\n                    />\n                  </p.Stack>\n                </div>\n              </p.Stack>\n            </div>\n          ) : null}\n          {true ? (\n            <CtaBottom\n              data-plasmic-name={\"ctaBottom\"}\n              data-plasmic-override={overrides.ctaBottom}\n              className={classNames(\"__wab_instance\", sty.ctaBottom)}\n            />\n          ) : null}\n          {true ? (\n            <Footer\n              data-plasmic-name={\"footer\"}\n              data-plasmic-override={overrides.footer}\n              className={classNames(\"__wab_instance\", sty.footer)}\n            />\n          ) : null}\n        </p.Stack>\n      </div>\n    </React.Fragment>\n  )\n}\n\nconst PlasmicDescendants = {\n  root: [\n    \"root\",\n    \"header\",\n    \"hero\",\n    \"triangle\",\n    \"companiesSection\",\n    \"container2\",\n    \"h2\",\n    \"ctaBottom\",\n    \"footer\",\n  ],\n\n  header: [\"header\"],\n  hero: [\"hero\", \"triangle\"],\n  triangle: [\"triangle\"],\n  companiesSection: [\"companiesSection\", \"container2\", \"h2\"],\n  container2: [\"container2\", \"h2\"],\n  h2: [\"h2\"],\n  ctaBottom: [\"ctaBottom\"],\n  footer: [\"footer\"],\n}\n\nfunction makeNodeComponent(nodeName) {\n  const func = function (props) {\n    const { variants, args, overrides } = React.useMemo(\n      () =>\n        deriveRenderOpts(props, {\n          name: nodeName,\n          descendantNames: [...PlasmicDescendants[nodeName]],\n          internalArgPropNames: PlasmicHome__ArgProps,\n          internalVariantPropNames: PlasmicHome__VariantProps,\n        }),\n\n      [props, nodeName]\n    )\n\n    return PlasmicHome__RenderFunc({\n      variants,\n      args,\n      overrides,\n      forNode: nodeName,\n    })\n  }\n  if (nodeName === \"root\") {\n    func.displayName = \"PlasmicHome\"\n  } else {\n    func.displayName = `PlasmicHome.${nodeName}`\n  }\n  return func\n}\n\nexport const PlasmicHome = Object.assign(\n  // Top-level PlasmicHome renders the root element\n  makeNodeComponent(\"root\"),\n  {\n    // Helper components rendering sub-elements\n    header: makeNodeComponent(\"header\"),\n    hero: makeNodeComponent(\"hero\"),\n    triangle: makeNodeComponent(\"triangle\"),\n    companiesSection: makeNodeComponent(\"companiesSection\"),\n    container2: makeNodeComponent(\"container2\"),\n    h2: makeNodeComponent(\"h2\"),\n    ctaBottom: makeNodeComponent(\"ctaBottom\"),\n    footer: makeNodeComponent(\"footer\"),\n    // Metadata about props expected for PlasmicHome\n    internalVariantProps: PlasmicHome__VariantProps,\n    internalArgProps: PlasmicHome__ArgProps,\n  }\n)\n\nexport default PlasmicHome\n/* prettier-ignore-end */\n","// extracted by mini-css-extract-plugin\nexport var __wab_imgSpacer = \"PlasmicHome-module--__wab_img-spacer--eGW5Z\";\nexport var companiesSection = \"PlasmicHome-module--companiesSection--4q-w2\";\nexport var container2 = \"PlasmicHome-module--container2--X2tt2\";\nexport var ctaBottom = \"PlasmicHome-module--ctaBottom--yx5XK\";\nexport var footer = \"PlasmicHome-module--footer--fGGEC\";\nexport var freeBox___4Hayf = \"PlasmicHome-module--freeBox___4Hayf--IPM0H\";\nexport var freeBox__ycGip = \"PlasmicHome-module--freeBox__ycGip--OQRTH\";\nexport var h2 = \"PlasmicHome-module--h2--lS+1b\";\nexport var header = \"PlasmicHome-module--header--y5GMP\";\nexport var hero = \"PlasmicHome-module--hero--gmnY9\";\nexport var img___0DcrR = \"PlasmicHome-module--img___0DcrR--juKoc\";\nexport var img__ab4Ic = \"PlasmicHome-module--img__ab4Ic--ymsKw\";\nexport var img__faU7H = \"PlasmicHome-module--img__faU7H---bDzs\";\nexport var img__fjh8N = \"PlasmicHome-module--img__fjh8N--dE-9A\";\nexport var img__nGvoU = \"PlasmicHome-module--img__nGvoU--620MW\";\nexport var root = \"PlasmicHome-module--root--GxK3v\";\nexport var triangle = \"PlasmicHome-module--triangle--2N2Ab\";","// This is a skeleton starter React page generated by Plasmic.\n// This file is owned by you, feel free to edit as you see fit.\nimport * as React from \"react\"\nimport { PlasmicHome } from \"../components/plasmic/rva_new/PlasmicHome\"\n\nfunction Home() {\n  // Use PlasmicHome to render this component as it was\n  // designed in Plasmic, by activating the appropriate variants,\n  // attaching the appropriate event handlers, etc.  You\n  // can also install whatever React hooks you need here to manage state or\n  // fetch data.\n  //\n  // Props you can pass into PlasmicHome are:\n  // 1. Variants you want to activate,\n  // 2. Contents for slots you want to fill,\n  // 3. Overrides for any named node in the component to attach behavior and data,\n  // 4. Props to set on the root node.\n  //\n  // By default, PlasmicHome is wrapped by your project's global\n  // variant context providers. These wrappers may be moved to\n  // Gatsby \"wrapRootElement\" function\n  // (https://www.gatsbyjs.com/docs/reference/config-files/gatsby-ssr#wrapRootElement).\n  return <PlasmicHome />\n}\n\nexport default Home\n"],"names":["PlasmicCtaBottom__VariantProps","Array","PlasmicCtaBottom__ArgProps","PlasmicDescendants","root","container","h2","button","makeNodeComponent","nodeName","func","props","React","deriveRenderOpts","name","descendantNames","internalArgPropNames","internalVariantPropNames","variants","overrides","forNode","ph","Object","assign","args","className","classNames","projectcss","as","hasGap","Button","color","PlasmicCtaBottom__RenderFunc","displayName","PlasmicCtaBottom","internalVariantProps","internalArgProps","CtaBottom_","ref","PlasmicFig__VariantProps","PlasmicFig__ArgProps","PlasmicFig","PlasmicFig__RenderFunc","Fig_","PlasmicHome__VariantProps","PlasmicHome__ArgProps","header","hero","triangle","companiesSection","container2","ctaBottom","footer","Header","alt","displayHeight","displayMaxHeight","displayMaxWidth","displayMinHeight","displayMinWidth","displayWidth","loading","src","rvaTriangle2PngZCIWyJrt","fullWidth","fullHeight","aspectRatio","undefined","CtaBottom","Footer","PlasmicHome__RenderFunc","PlasmicHome"],"sourceRoot":""}