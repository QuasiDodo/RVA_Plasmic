{"version":3,"file":"component---src-pages-why-us-jsx-833f06be72266d3e18e5.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/components/plasmic/rva_new/PlasmicCtaBottom.jsx","webpack://gatsby-starter-default/./src/components/plasmic/rva_new/PlasmicCtaBottom.module.css","webpack://gatsby-starter-default/./src/components/CtaBottom.jsx","webpack://gatsby-starter-default/./src/components/plasmic/rva_new/PlasmicTextInput.module.css","webpack://gatsby-starter-default/./src/components/plasmic/rva_new/PlasmicTextInput.jsx","webpack://gatsby-starter-default/./src/components/TextInput.jsx","webpack://gatsby-starter-default/./src/components/plasmic/rva_new/icons/PlasmicIcon__Searchsvg.jsx","webpack://gatsby-starter-default/./src/components/plasmic/rva_new/images/cogsjpg.jpeg","webpack://gatsby-starter-default/./src/components/plasmic/rva_new/images/valuePriceScalepng.png","webpack://gatsby-starter-default/./src/components/plasmic/rva_new/PlasmicWhyUs.jsx","webpack://gatsby-starter-default/./src/components/plasmic/rva_new/PlasmicWhyUs.module.css","webpack://gatsby-starter-default/./src/pages/WhyUs.jsx"],"sourcesContent":["// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\n/** @jsxRuntime classic */\n/** @jsx createPlasmicElementProxy */\n/** @jsxFrag React.Fragment */\n// This class is auto-generated by Plasmic; please do not edit!\n// Plasmic Project: sSe8AoDiAW5DkmycE76RKb\n// Component: aZrFk0trqYG6jU\nimport * as React from \"react\"\nimport * as p from \"@plasmicapp/react-web\"\nimport * as ph from \"@plasmicapp/host\"\nimport {\n  classNames,\n  createPlasmicElementProxy,\n  deriveRenderOpts,\n} from \"@plasmicapp/react-web\"\nimport Button from \"../../Button\" // plasmic-import: AI4dzLfJKZOBy/component\nimport \"@plasmicapp/react-web/lib/plasmic.css\"\nimport * as projectcss from \"./plasmic_rva_new.module.css\" // plasmic-import: sSe8AoDiAW5DkmycE76RKb/projectcss\nimport * as sty from \"./PlasmicCtaBottom.module.css\" // plasmic-import: aZrFk0trqYG6jU/css\n\nexport const PlasmicCtaBottom__VariantProps = new Array()\n\nexport const PlasmicCtaBottom__ArgProps = new Array()\n\nfunction PlasmicCtaBottom__RenderFunc(props) {\n  const { variants, overrides, forNode } = props\n  const $ctx = ph.useDataEnv?.() || {}\n  const args = React.useMemo(() => Object.assign({}, props.args), [props.args])\n  const $props = args\n  return (\n    <div\n      data-plasmic-name={\"root\"}\n      data-plasmic-override={overrides.root}\n      data-plasmic-root={true}\n      data-plasmic-for-node={forNode}\n      className={classNames(\n        projectcss.all,\n        projectcss.root_reset,\n        projectcss.plasmic_default_styles,\n        projectcss.plasmic_mixins,\n        projectcss.plasmic_tokens,\n        sty.root\n      )}\n    >\n      <p.Stack\n        as={\"div\"}\n        data-plasmic-name={\"container\"}\n        data-plasmic-override={overrides.container}\n        hasGap={true}\n        className={classNames(projectcss.all, sty.container)}\n      >\n        <h2\n          data-plasmic-name={\"h2\"}\n          data-plasmic-override={overrides.h2}\n          className={classNames(\n            projectcss.all,\n            projectcss.h2,\n            projectcss.__wab_text,\n            sty.h2\n          )}\n        >\n          {\"Contact us\"}\n        </h2>\n\n        <Button\n          data-plasmic-name={\"button\"}\n          data-plasmic-override={overrides.button}\n          className={classNames(\"__wab_instance\", sty.button)}\n          color={\"blackCoffee\"}\n        >\n          {\"Get In Touch\"}\n        </Button>\n      </p.Stack>\n    </div>\n  )\n}\n\nconst PlasmicDescendants = {\n  root: [\"root\", \"container\", \"h2\", \"button\"],\n  container: [\"container\", \"h2\", \"button\"],\n  h2: [\"h2\"],\n  button: [\"button\"],\n}\n\nfunction makeNodeComponent(nodeName) {\n  const func = function (props) {\n    const { variants, args, overrides } = React.useMemo(\n      () =>\n        deriveRenderOpts(props, {\n          name: nodeName,\n          descendantNames: [...PlasmicDescendants[nodeName]],\n          internalArgPropNames: PlasmicCtaBottom__ArgProps,\n          internalVariantPropNames: PlasmicCtaBottom__VariantProps,\n        }),\n\n      [props, nodeName]\n    )\n\n    return PlasmicCtaBottom__RenderFunc({\n      variants,\n      args,\n      overrides,\n      forNode: nodeName,\n    })\n  }\n  if (nodeName === \"root\") {\n    func.displayName = \"PlasmicCtaBottom\"\n  } else {\n    func.displayName = `PlasmicCtaBottom.${nodeName}`\n  }\n  return func\n}\n\nexport const PlasmicCtaBottom = Object.assign(\n  // Top-level PlasmicCtaBottom renders the root element\n  makeNodeComponent(\"root\"),\n  {\n    // Helper components rendering sub-elements\n    container: makeNodeComponent(\"container\"),\n    h2: makeNodeComponent(\"h2\"),\n    button: makeNodeComponent(\"button\"),\n    // Metadata about props expected for PlasmicCtaBottom\n    internalVariantProps: PlasmicCtaBottom__VariantProps,\n    internalArgProps: PlasmicCtaBottom__ArgProps,\n  }\n)\n\nexport default PlasmicCtaBottom\n/* prettier-ignore-end */\n","// extracted by mini-css-extract-plugin\nexport var button = \"PlasmicCtaBottom-module--button--yvbv7\";\nexport var container = \"PlasmicCtaBottom-module--container--IEZoT\";\nexport var h2 = \"PlasmicCtaBottom-module--h2--HIbGy\";\nexport var root = \"PlasmicCtaBottom-module--root--BaEkG\";\nexport var svg__pyKfL = \"PlasmicCtaBottom-module--svg__pyKfL--ecrFT\";\nexport var svg__sr3S = \"PlasmicCtaBottom-module--svg__sr3S--8N2Tv\";","// This is a skeleton starter React component generated by Plasmic.\n// This file is owned by you, feel free to edit as you see fit.\nimport * as React from \"react\"\nimport { PlasmicCtaBottom } from \"./plasmic/rva_new/PlasmicCtaBottom\"\n\nfunction CtaBottom_(props, ref) {\n  // Use PlasmicCtaBottom to render this component as it was\n  // designed in Plasmic, by activating the appropriate variants,\n  // attaching the appropriate event handlers, etc.  You\n  // can also install whatever React hooks you need here to manage state or\n  // fetch data.\n  //\n  // Props you can pass into PlasmicCtaBottom are:\n  // 1. Variants you want to activate,\n  // 2. Contents for slots you want to fill,\n  // 3. Overrides for any named node in the component to attach behavior and data,\n  // 4. Props to set on the root node.\n  //\n  // By default, we are just piping all CtaBottomProps here, but feel free\n  // to do whatever works for you.\n  return <PlasmicCtaBottom root={{ ref }} {...props} />\n}\n\nconst CtaBottom = React.forwardRef(CtaBottom_)\n\nexport default CtaBottom\n","// extracted by mini-css-extract-plugin\nexport var endIconContainer = \"PlasmicTextInput-module--endIconContainer--Qhh20\";\nexport var endIconContainershowEndIcon = \"PlasmicTextInput-module--endIconContainershowEndIcon--CVSRd\";\nexport var root = \"PlasmicTextInput-module--root--JmSse\";\nexport var root___focusVisibleWithin = \"PlasmicTextInput-module--root___focusVisibleWithin--JDsZb\";\nexport var rootcolor_dark = \"PlasmicTextInput-module--rootcolor_dark--ZNp3R\";\nexport var slotTargetEndIconcolor_dark = \"PlasmicTextInput-module--slotTargetEndIconcolor_dark--NrIvP\";\nexport var slotTargetEndIconshowEndIcon = \"PlasmicTextInput-module--slotTargetEndIconshowEndIcon--R1-W2\";\nexport var slotTargetStartIconcolor_dark = \"PlasmicTextInput-module--slotTargetStartIconcolor_dark--r9DVf\";\nexport var slotTargetStartIconshowStartIcon = \"PlasmicTextInput-module--slotTargetStartIconshowStartIcon--CpdE0\";\nexport var startIconContainer = \"PlasmicTextInput-module--startIconContainer--RAGw9\";\nexport var startIconContainer___focusVisibleWithin = \"PlasmicTextInput-module--startIconContainer___focusVisibleWithin--+Wyhx\";\nexport var startIconContainershowStartIcon = \"PlasmicTextInput-module--startIconContainershowStartIcon--zCrOD\";\nexport var svg__v4Tdi = \"PlasmicTextInput-module--svg__v4Tdi---q7Wy\";\nexport var svg__vlAun = \"PlasmicTextInput-module--svg__vlAun---ySSb\";","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\n/** @jsxRuntime classic */\n/** @jsx createPlasmicElementProxy */\n/** @jsxFrag React.Fragment */\n// This class is auto-generated by Plasmic; please do not edit!\n// Plasmic Project: sSe8AoDiAW5DkmycE76RKb\n// Component: 8d2n861ybhR\nimport * as React from \"react\"\nimport * as p from \"@plasmicapp/react-web\"\nimport * as ph from \"@plasmicapp/host\"\nimport * as pp from \"@plasmicapp/react-web\"\nimport {\n  hasVariant,\n  classNames,\n  createPlasmicElementProxy,\n  useTrigger,\n  deriveRenderOpts,\n} from \"@plasmicapp/react-web\"\nimport \"@plasmicapp/react-web/lib/plasmic.css\"\nimport * as projectcss from \"./plasmic_rva_new.module.css\" // plasmic-import: sSe8AoDiAW5DkmycE76RKb/projectcss\nimport * as sty from \"./PlasmicTextInput.module.css\" // plasmic-import: 8d2n861ybhR/css\nimport SearchsvgIcon from \"./icons/PlasmicIcon__Searchsvg\" // plasmic-import: hyFJbEzzzDh/icon\nimport ChecksvgIcon from \"./icons/PlasmicIcon__Checksvg\" // plasmic-import: KZLSx5GjmP3wFG/icon\n\nexport const PlasmicTextInput__VariantProps = new Array(\n  \"showStartIcon\",\n  \"showEndIcon\",\n  \"isDisabled\",\n  \"color\"\n)\n\nexport const PlasmicTextInput__ArgProps = new Array(\n  \"placeholder\",\n  \"endIcon\",\n  \"startIcon\",\n  \"value\",\n  \"name\",\n  \"required\",\n  \"aria-label\",\n  \"aria-labelledby\"\n)\n\nfunction PlasmicTextInput__RenderFunc(props) {\n  const { variants, overrides, forNode } = props\n  const $ctx = ph.useDataEnv?.() || {}\n  const args = React.useMemo(\n    () =>\n      Object.assign(\n        {\n          placeholder: \"Enter something…\",\n        },\n\n        props.args\n      ),\n\n    [props.args]\n  )\n\n  const $props = args\n  const [isRootFocusVisibleWithin, triggerRootFocusVisibleWithinProps] =\n    useTrigger(\"useFocusVisibleWithin\", {\n      isTextInput: false,\n    })\n\n  const triggers = {\n    focusVisibleWithin_root: isRootFocusVisibleWithin,\n  }\n\n  return (\n    <div\n      data-plasmic-name={\"root\"}\n      data-plasmic-override={overrides.root}\n      data-plasmic-root={true}\n      data-plasmic-for-node={forNode}\n      className={classNames(\n        projectcss.all,\n        projectcss.root_reset,\n        projectcss.plasmic_default_styles,\n        projectcss.plasmic_mixins,\n        projectcss.plasmic_tokens,\n        sty.root,\n        {\n          [sty.root___focusVisibleWithin]: triggers.focusVisibleWithin_root,\n          [sty.rootcolor_dark]: hasVariant(variants, \"color\", \"dark\"),\n          [sty.rootisDisabled]: hasVariant(\n            variants,\n            \"isDisabled\",\n            \"isDisabled\"\n          ),\n\n          [sty.rootshowStartIcon]: hasVariant(\n            variants,\n            \"showStartIcon\",\n            \"showStartIcon\"\n          ),\n        }\n      )}\n      data-plasmic-trigger-props={[triggerRootFocusVisibleWithinProps]}\n    >\n      {(\n        hasVariant(variants, \"showStartIcon\", \"showStartIcon\") ? true : true\n      ) ? (\n        <div\n          data-plasmic-name={\"startIconContainer\"}\n          data-plasmic-override={overrides.startIconContainer}\n          className={classNames(projectcss.all, sty.startIconContainer, {\n            [sty.startIconContainer___focusVisibleWithin]:\n              triggers.focusVisibleWithin_root,\n            [sty.startIconContainercolor_dark]: hasVariant(\n              variants,\n              \"color\",\n              \"dark\"\n            ),\n\n            [sty.startIconContainerisDisabled]: hasVariant(\n              variants,\n              \"isDisabled\",\n              \"isDisabled\"\n            ),\n\n            [sty.startIconContainershowStartIcon]: hasVariant(\n              variants,\n              \"showStartIcon\",\n              \"showStartIcon\"\n            ),\n          })}\n        >\n          {p.renderPlasmicSlot({\n            defaultContents: (\n              <SearchsvgIcon\n                className={classNames(projectcss.all, sty.svg__v4Tdi)}\n                role={\"img\"}\n              />\n            ),\n\n            value: args.startIcon,\n            className: classNames(sty.slotTargetStartIcon, {\n              [sty.slotTargetStartIconcolor_dark]: hasVariant(\n                variants,\n                \"color\",\n                \"dark\"\n              ),\n\n              [sty.slotTargetStartIconshowStartIcon]: hasVariant(\n                variants,\n                \"showStartIcon\",\n                \"showStartIcon\"\n              ),\n            }),\n          })}\n        </div>\n      ) : null}\n      {(hasVariant(variants, \"showEndIcon\", \"showEndIcon\") ? true : true) ? (\n        <div\n          data-plasmic-name={\"endIconContainer\"}\n          data-plasmic-override={overrides.endIconContainer}\n          className={classNames(projectcss.all, sty.endIconContainer, {\n            [sty.endIconContainercolor_dark]: hasVariant(\n              variants,\n              \"color\",\n              \"dark\"\n            ),\n\n            [sty.endIconContainershowEndIcon]: hasVariant(\n              variants,\n              \"showEndIcon\",\n              \"showEndIcon\"\n            ),\n          })}\n        >\n          {p.renderPlasmicSlot({\n            defaultContents: (\n              <ChecksvgIcon\n                className={classNames(projectcss.all, sty.svg__vlAun)}\n                role={\"img\"}\n              />\n            ),\n\n            value: args.endIcon,\n            className: classNames(sty.slotTargetEndIcon, {\n              [sty.slotTargetEndIconcolor_dark]: hasVariant(\n                variants,\n                \"color\",\n                \"dark\"\n              ),\n\n              [sty.slotTargetEndIconshowEndIcon]: hasVariant(\n                variants,\n                \"showEndIcon\",\n                \"showEndIcon\"\n              ),\n            }),\n          })}\n        </div>\n      ) : null}\n    </div>\n  )\n}\n\nfunction useBehavior(props, ref) {\n  return pp.useTextInput(\n    PlasmicTextInput,\n    props,\n    {\n      showStartIconVariant: {\n        group: \"showStartIcon\",\n        variant: \"showStartIcon\",\n      },\n\n      showEndIconVariant: { group: \"showEndIcon\", variant: \"showEndIcon\" },\n      isDisabledVariant: { group: \"isDisabled\", variant: \"isDisabled\" },\n      startIconSlot: \"startIcon\",\n      endIconSlot: \"endIcon\",\n      root: \"root\",\n      input: \"input\",\n    },\n\n    ref\n  )\n}\n\nconst PlasmicDescendants = {\n  root: [\"root\", \"startIconContainer\", \"endIconContainer\"],\n  startIconContainer: [\"startIconContainer\"],\n  endIconContainer: [\"endIconContainer\"],\n}\n\nfunction makeNodeComponent(nodeName) {\n  const func = function (props) {\n    const { variants, args, overrides } = React.useMemo(\n      () =>\n        deriveRenderOpts(props, {\n          name: nodeName,\n          descendantNames: [...PlasmicDescendants[nodeName]],\n          internalArgPropNames: PlasmicTextInput__ArgProps,\n          internalVariantPropNames: PlasmicTextInput__VariantProps,\n        }),\n\n      [props, nodeName]\n    )\n\n    return PlasmicTextInput__RenderFunc({\n      variants,\n      args,\n      overrides,\n      forNode: nodeName,\n    })\n  }\n  if (nodeName === \"root\") {\n    func.displayName = \"PlasmicTextInput\"\n  } else {\n    func.displayName = `PlasmicTextInput.${nodeName}`\n  }\n  return func\n}\n\nexport const PlasmicTextInput = Object.assign(\n  // Top-level PlasmicTextInput renders the root element\n  makeNodeComponent(\"root\"),\n  {\n    // Helper components rendering sub-elements\n    startIconContainer: makeNodeComponent(\"startIconContainer\"),\n    endIconContainer: makeNodeComponent(\"endIconContainer\"),\n    // Metadata about props expected for PlasmicTextInput\n    internalVariantProps: PlasmicTextInput__VariantProps,\n    internalArgProps: PlasmicTextInput__ArgProps,\n    useBehavior,\n  }\n)\n\nexport default PlasmicTextInput\n/* prettier-ignore-end */\n","import * as React from \"react\"\nimport { PlasmicTextInput } from \"./plasmic/rva_new/PlasmicTextInput\"\n\nfunction TextInput_(props, ref) {\n  const { plasmicProps } = PlasmicTextInput.useBehavior(props, ref)\n  return <PlasmicTextInput {...plasmicProps} />\n}\n\nconst TextInput = React.forwardRef(TextInput_)\n\nexport default Object.assign(TextInput, {\n  __plumeType: \"text-input\",\n})\n","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\nimport React from \"react\"\nimport { classNames } from \"@plasmicapp/react-web\"\n\nexport function SearchsvgIcon(props) {\n  const { className, style, title, ...restProps } = props\n  return (\n    <svg\n      xmlns={\"http://www.w3.org/2000/svg\"}\n      fill={\"none\"}\n      viewBox={\"0 0 24 24\"}\n      height={\"1em\"}\n      width={\"1em\"}\n      className={classNames(\"plasmic-default__svg\", className)}\n      style={style}\n      {...restProps}\n    >\n      {title && <title>{title}</title>}\n\n      <path\n        stroke={\"currentColor\"}\n        strokeLinecap={\"round\"}\n        strokeLinejoin={\"round\"}\n        strokeWidth={\"1.5\"}\n        d={\n          \"M19.25 19.25L15.5 15.5M4.75 11a6.25 6.25 0 1112.5 0 6.25 6.25 0 01-12.5 0z\"\n        }\n      ></path>\n    </svg>\n  )\n}\n\nexport default SearchsvgIcon\n/* prettier-ignore-end */\n","export default __webpack_public_path__ + \"static/cogsjpg-e1783bd517b0dcd8fb824ee6328087c8.jpeg\";","export default __webpack_public_path__ + \"static/valuePriceScalepng-d5e0cc005e06e689f347e8a4d37828e4.png\";","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\n/** @jsxRuntime classic */\n/** @jsx createPlasmicElementProxy */\n/** @jsxFrag React.Fragment */\n// This class is auto-generated by Plasmic; please do not edit!\n// Plasmic Project: sSe8AoDiAW5DkmycE76RKb\n// Component: EgVjH3shVXgCZy\nimport * as React from \"react\"\nimport * as p from \"@plasmicapp/react-web\"\nimport * as ph from \"@plasmicapp/host\"\nimport {\n  classNames,\n  createPlasmicElementProxy,\n  deriveRenderOpts,\n  ensureGlobalVariants,\n} from \"@plasmicapp/react-web\"\nimport Header from \"../../Header\" // plasmic-import: rlLZVswJyeOUp/component\nimport TextInput from \"../../TextInput\" // plasmic-import: 8d2n861ybhR/component\nimport CtaBottom from \"../../CtaBottom\" // plasmic-import: aZrFk0trqYG6jU/component\nimport Footer from \"../../Footer\" // plasmic-import: aKMJC5Su_PgNb/component\nimport { useScreenVariants as useScreenVariantsxe8Uhzv7PeLJgW } from \"./PlasmicGlobalVariant__Screen\" // plasmic-import: XE8Uhzv7PeLJgW/globalVariant\nimport \"@plasmicapp/react-web/lib/plasmic.css\"\nimport * as projectcss from \"./plasmic_rva_new.module.css\" // plasmic-import: sSe8AoDiAW5DkmycE76RKb/projectcss\nimport * as sty from \"./PlasmicWhyUs.module.css\" // plasmic-import: EgVjH3shVXgCZy/css\nimport cogsjpgYt6Exh67K from \"./images/cogsjpg.jpeg\" // plasmic-import: YT6exh67K/picture\nimport valuePriceScalepngXLb8To3Wt from \"./images/valuePriceScalepng.png\" // plasmic-import: XLb8to3Wt/picture\n\nexport const PlasmicWhyUs__VariantProps = new Array()\n\nexport const PlasmicWhyUs__ArgProps = new Array()\n\nfunction PlasmicWhyUs__RenderFunc(props) {\n  const { variants, overrides, forNode } = props\n  const $ctx = ph.useDataEnv?.() || {}\n  const args = React.useMemo(() => Object.assign({}, props.args), [props.args])\n  const $props = args\n  const globalVariants = ensureGlobalVariants({\n    screen: useScreenVariantsxe8Uhzv7PeLJgW(),\n  })\n\n  return (\n    <React.Fragment>\n      <style>{`\n        body {\n          margin: 0;\n        }\n      `}</style>\n\n      <div className={projectcss.plasmic_page_wrapper}>\n        <p.Stack\n          as={\"div\"}\n          data-plasmic-name={\"root\"}\n          data-plasmic-override={overrides.root}\n          data-plasmic-root={true}\n          data-plasmic-for-node={forNode}\n          hasGap={true}\n          className={classNames(\n            projectcss.all,\n            projectcss.root_reset,\n            projectcss.plasmic_default_styles,\n            projectcss.plasmic_mixins,\n            projectcss.plasmic_tokens,\n            sty.root\n          )}\n        >\n          <Header\n            data-plasmic-name={\"header\"}\n            data-plasmic-override={overrides.header}\n            className={classNames(\"__wab_instance\", sty.header)}\n          />\n\n          <div\n            data-plasmic-name={\"pageBanerSection\"}\n            data-plasmic-override={overrides.pageBanerSection}\n            className={classNames(projectcss.all, sty.pageBanerSection)}\n          >\n            <div className={classNames(projectcss.all, sty.freeBox__tudKw)}>\n              <h1\n                data-plasmic-name={\"h1\"}\n                data-plasmic-override={overrides.h1}\n                className={classNames(\n                  projectcss.all,\n                  projectcss.h1,\n                  projectcss.__wab_text,\n                  sty.h1\n                )}\n              >\n                {\"Why us\"}\n              </h1>\n            </div>\n          </div>\n\n          <section\n            data-plasmic-name={\"section\"}\n            data-plasmic-override={overrides.section}\n            className={classNames(projectcss.all, sty.section)}\n          >\n            <div className={classNames(projectcss.all, sty.freeBox__eu1Qn)}>\n              <div\n                data-plasmic-name={\"columns\"}\n                data-plasmic-override={overrides.columns}\n                className={classNames(projectcss.all, sty.columns)}\n              >\n                <div className={classNames(projectcss.all, sty.column__oUaYi)}>\n                  <p.Stack\n                    as={\"div\"}\n                    hasGap={true}\n                    className={classNames(projectcss.all, sty.freeBox__aXbkT)}\n                  >\n                    <h2\n                      className={classNames(\n                        projectcss.all,\n                        projectcss.h2,\n                        projectcss.__wab_text,\n                        sty.h2__o2KnL\n                      )}\n                    >\n                      {\"We are practicioners\"}\n                    </h2>\n\n                    <div\n                      className={classNames(\n                        projectcss.all,\n                        projectcss.__wab_text,\n                        sty.text__q6O8K\n                      )}\n                    >\n                      {\n                        \"We have a combination of consulting and line management experience\"\n                      }\n                    </div>\n\n                    <div\n                      className={classNames(\n                        projectcss.all,\n                        projectcss.__wab_text,\n                        sty.text___75Ee1\n                      )}\n                    >\n                      {\n                        \"We intimately understand the business levers and do hit the ground running\\n\\nWe have a pragmatic approach and an obsession about focusing on value\\n\\nWe offer great value\\n\\nWe are more cost effective than global/major consulting firms\\n\\nWe offer substantial senior team involvement in projects execution\\n\\nAbility – and price point – to deliver client value for both strategic and implementation engagements\\n\"\n                      }\n                    </div>\n                  </p.Stack>\n                </div>\n\n                <div className={classNames(projectcss.all, sty.column__hz6G9)}>\n                  <p.PlasmicImg\n                    alt={\"\"}\n                    className={classNames(sty.img__reLaD)}\n                    displayHeight={\"100%\"}\n                    displayMaxHeight={\"none\"}\n                    displayMaxWidth={\"100%\"}\n                    displayMinHeight={\"0\"}\n                    displayMinWidth={\"0\"}\n                    displayWidth={\"100%\"}\n                    loading={\"lazy\"}\n                    src={{\n                      src: cogsjpgYt6Exh67K,\n                      fullWidth: 5655,\n                      fullHeight: 3775,\n                      aspectRatio: undefined,\n                    }}\n                  />\n                </div>\n              </div>\n            </div>\n\n            <TextInput\n              data-plasmic-name={\"textInput\"}\n              data-plasmic-override={overrides.textInput}\n              className={classNames(\"__wab_instance\", sty.textInput)}\n            />\n\n            <div className={classNames(projectcss.all, sty.freeBox__fuJm2)}>\n              <p.PlasmicImg\n                alt={\"\"}\n                className={classNames(sty.img__s9CRf)}\n                displayHeight={\"auto\"}\n                displayMaxHeight={\"none\"}\n                displayMaxWidth={\"100%\"}\n                displayMinHeight={\"0\"}\n                displayMinWidth={\"0\"}\n                displayWidth={\"auto\"}\n                loading={\"lazy\"}\n                src={{\n                  src: valuePriceScalepngXLb8To3Wt,\n                  fullWidth: 613,\n                  fullHeight: 352,\n                  aspectRatio: undefined,\n                }}\n              />\n            </div>\n          </section>\n\n          <div\n            data-plasmic-name={\"companiesSection\"}\n            data-plasmic-override={overrides.companiesSection}\n            className={classNames(projectcss.all, sty.companiesSection)}\n          >\n            <p.Stack\n              as={\"div\"}\n              data-plasmic-name={\"container2\"}\n              data-plasmic-override={overrides.container2}\n              hasGap={true}\n              className={classNames(projectcss.all, sty.container2)}\n            >\n              <h2\n                className={classNames(\n                  projectcss.all,\n                  projectcss.h2,\n                  projectcss.__wab_text,\n                  sty.h2__w1OHy\n                )}\n              >\n                {\"We work with Brands\"}\n              </h2>\n\n              <div className={classNames(projectcss.all, sty.freeBox__w3OYy)}>\n                <p.Stack\n                  as={\"div\"}\n                  hasGap={true}\n                  className={classNames(projectcss.all, sty.freeBox__ju6Fw)}\n                >\n                  <p.PlasmicImg\n                    alt={\"\"}\n                    className={classNames(sty.img__aUQm)}\n                    displayHeight={\"48px\"}\n                    displayMaxHeight={\"none\"}\n                    displayMaxWidth={\"none\"}\n                    displayMinHeight={\"0\"}\n                    displayMinWidth={\"0\"}\n                    displayWidth={\"auto\"}\n                    src={\n                      \"https://plasmic-ray.s3.us-west-2.amazonaws.com/logo-strapi.svg\"\n                    }\n                  />\n\n                  <p.PlasmicImg\n                    alt={\"\"}\n                    className={classNames(sty.img__qi6Zu)}\n                    displayHeight={\"48px\"}\n                    displayMaxHeight={\"none\"}\n                    displayMaxWidth={\"none\"}\n                    displayMinHeight={\"0\"}\n                    displayMinWidth={\"0\"}\n                    displayWidth={\"auto\"}\n                    src={\n                      \"https://plasmic-ray.s3.us-west-2.amazonaws.com/logo-segment.svg\"\n                    }\n                  />\n\n                  <p.PlasmicImg\n                    alt={\"\"}\n                    className={classNames(sty.img__fMLjk)}\n                    displayHeight={\"48px\"}\n                    displayMaxHeight={\"none\"}\n                    displayMaxWidth={\"none\"}\n                    displayMinHeight={\"0\"}\n                    displayMinWidth={\"0\"}\n                    displayWidth={\"auto\"}\n                    src={\n                      \"https://plasmic-ray.s3.us-west-2.amazonaws.com/logo-xstate.svg\"\n                    }\n                  />\n\n                  <p.PlasmicImg\n                    alt={\"\"}\n                    className={classNames(sty.img__w6YfT)}\n                    displayHeight={\"48px\"}\n                    displayMaxHeight={\"none\"}\n                    displayMaxWidth={\"none\"}\n                    displayMinHeight={\"0\"}\n                    displayMinWidth={\"0\"}\n                    displayWidth={\"auto\"}\n                    src={\n                      \"https://plasmic-ray.s3.us-west-2.amazonaws.com/logo-mapbox.svg\"\n                    }\n                  />\n                </p.Stack>\n              </div>\n            </p.Stack>\n          </div>\n\n          <CtaBottom\n            data-plasmic-name={\"ctaBottom\"}\n            data-plasmic-override={overrides.ctaBottom}\n            className={classNames(\"__wab_instance\", sty.ctaBottom)}\n          />\n\n          <Footer\n            data-plasmic-name={\"footer\"}\n            data-plasmic-override={overrides.footer}\n            className={classNames(\"__wab_instance\", sty.footer)}\n          />\n        </p.Stack>\n      </div>\n    </React.Fragment>\n  )\n}\n\nconst PlasmicDescendants = {\n  root: [\n    \"root\",\n    \"header\",\n    \"pageBanerSection\",\n    \"h1\",\n    \"section\",\n    \"columns\",\n    \"textInput\",\n    \"textbox\",\n    \"companiesSection\",\n    \"container2\",\n    \"ctaBottom\",\n    \"footer\",\n  ],\n\n  header: [\"header\"],\n  pageBanerSection: [\"pageBanerSection\", \"h1\"],\n  h1: [\"h1\"],\n  section: [\"section\", \"columns\", \"textInput\", \"textbox\"],\n  columns: [\"columns\"],\n  textInput: [\"textInput\", \"textbox\"],\n  companiesSection: [\"companiesSection\", \"container2\"],\n  container2: [\"container2\"],\n  ctaBottom: [\"ctaBottom\"],\n  footer: [\"footer\"],\n}\n\nfunction makeNodeComponent(nodeName) {\n  const func = function (props) {\n    const { variants, args, overrides } = React.useMemo(\n      () =>\n        deriveRenderOpts(props, {\n          name: nodeName,\n          descendantNames: [...PlasmicDescendants[nodeName]],\n          internalArgPropNames: PlasmicWhyUs__ArgProps,\n          internalVariantPropNames: PlasmicWhyUs__VariantProps,\n        }),\n\n      [props, nodeName]\n    )\n\n    return PlasmicWhyUs__RenderFunc({\n      variants,\n      args,\n      overrides,\n      forNode: nodeName,\n    })\n  }\n  if (nodeName === \"root\") {\n    func.displayName = \"PlasmicWhyUs\"\n  } else {\n    func.displayName = `PlasmicWhyUs.${nodeName}`\n  }\n  return func\n}\n\nexport const PlasmicWhyUs = Object.assign(\n  // Top-level PlasmicWhyUs renders the root element\n  makeNodeComponent(\"root\"),\n  {\n    // Helper components rendering sub-elements\n    header: makeNodeComponent(\"header\"),\n    pageBanerSection: makeNodeComponent(\"pageBanerSection\"),\n    h1: makeNodeComponent(\"h1\"),\n    section: makeNodeComponent(\"section\"),\n    columns: makeNodeComponent(\"columns\"),\n    textInput: makeNodeComponent(\"textInput\"),\n    companiesSection: makeNodeComponent(\"companiesSection\"),\n    container2: makeNodeComponent(\"container2\"),\n    ctaBottom: makeNodeComponent(\"ctaBottom\"),\n    footer: makeNodeComponent(\"footer\"),\n    // Metadata about props expected for PlasmicWhyUs\n    internalVariantProps: PlasmicWhyUs__VariantProps,\n    internalArgProps: PlasmicWhyUs__ArgProps,\n  }\n)\n\nexport default PlasmicWhyUs\n/* prettier-ignore-end */\n","// extracted by mini-css-extract-plugin\nexport var __wab_imgSpacer = \"PlasmicWhyUs-module--__wab_img-spacer--tBUTG\";\nexport var column__hz6G9 = \"PlasmicWhyUs-module--column__hz6G9--h6EhE\";\nexport var column__oUaYi = \"PlasmicWhyUs-module--column__oUaYi--Wq9g3\";\nexport var columns = \"PlasmicWhyUs-module--columns--EXVoG\";\nexport var companiesSection = \"PlasmicWhyUs-module--companiesSection--k-qFD\";\nexport var container2 = \"PlasmicWhyUs-module--container2--j1OT5\";\nexport var ctaBottom = \"PlasmicWhyUs-module--ctaBottom--4oPWM\";\nexport var footer = \"PlasmicWhyUs-module--footer--7sREN\";\nexport var freeBox__aXbkT = \"PlasmicWhyUs-module--freeBox__aXbkT--wMnsv\";\nexport var freeBox__eu1Qn = \"PlasmicWhyUs-module--freeBox__eu1Qn--8Twc1\";\nexport var freeBox__fuJm2 = \"PlasmicWhyUs-module--freeBox__fuJm2--73mgK\";\nexport var freeBox__ju6Fw = \"PlasmicWhyUs-module--freeBox__ju6Fw--VY8na\";\nexport var freeBox__tudKw = \"PlasmicWhyUs-module--freeBox__tudKw--7Owo9\";\nexport var freeBox__w3OYy = \"PlasmicWhyUs-module--freeBox__w3OYy--0+WG3\";\nexport var h1 = \"PlasmicWhyUs-module--h1--tHQGM\";\nexport var h2__o2KnL = \"PlasmicWhyUs-module--h2__o2KnL--R7NI4\";\nexport var h2__w1OHy = \"PlasmicWhyUs-module--h2__w1OHy--q5LLG\";\nexport var header = \"PlasmicWhyUs-module--header--xfPNX\";\nexport var img__aUQm = \"PlasmicWhyUs-module--img__aUQm--Kejm9\";\nexport var img__fMLjk = \"PlasmicWhyUs-module--img__fMLjk--HmW7P\";\nexport var img__qi6Zu = \"PlasmicWhyUs-module--img__qi6Zu--G9l5h\";\nexport var img__reLaD = \"PlasmicWhyUs-module--img__reLaD--2bjfn\";\nexport var img__s9CRf = \"PlasmicWhyUs-module--img__s9CRf--KiPnF\";\nexport var img__w6YfT = \"PlasmicWhyUs-module--img__w6YfT--ETeTU\";\nexport var pageBanerSection = \"PlasmicWhyUs-module--pageBanerSection--8vPwT\";\nexport var root = \"PlasmicWhyUs-module--root--07jSt\";\nexport var section = \"PlasmicWhyUs-module--section--fCXgV\";\nexport var svg__kAI6 = \"PlasmicWhyUs-module--svg__kAI6--lznRU\";\nexport var svg__tqclP = \"PlasmicWhyUs-module--svg__tqclP--0mwsD\";\nexport var textInput = \"PlasmicWhyUs-module--textInput--k5Yza\";\nexport var text___75Ee1 = \"PlasmicWhyUs-module--text___75Ee1--4qbn-\";\nexport var text__q6O8K = \"PlasmicWhyUs-module--text__q6O8K--xvGxY\";","// This is a skeleton starter React page generated by Plasmic.\n// This file is owned by you, feel free to edit as you see fit.\nimport * as React from \"react\"\nimport { PlasmicWhyUs } from \"../components/plasmic/rva_new/PlasmicWhyUs\"\n\nfunction WhyUs() {\n  // Use PlasmicWhyUs to render this component as it was\n  // designed in Plasmic, by activating the appropriate variants,\n  // attaching the appropriate event handlers, etc.  You\n  // can also install whatever React hooks you need here to manage state or\n  // fetch data.\n  //\n  // Props you can pass into PlasmicWhyUs are:\n  // 1. Variants you want to activate,\n  // 2. Contents for slots you want to fill,\n  // 3. Overrides for any named node in the component to attach behavior and data,\n  // 4. Props to set on the root node.\n  //\n  // By default, PlasmicWhyUs is wrapped by your project's global\n  // variant context providers. These wrappers may be moved to\n  // Gatsby \"wrapRootElement\" function\n  // (https://www.gatsbyjs.com/docs/reference/config-files/gatsby-ssr#wrapRootElement).\n  return <PlasmicWhyUs />\n}\n\nexport default WhyUs\n"],"names":["PlasmicCtaBottom__VariantProps","Array","PlasmicCtaBottom__ArgProps","PlasmicDescendants","root","container","h2","button","makeNodeComponent","nodeName","func","props","React","deriveRenderOpts","name","descendantNames","internalArgPropNames","internalVariantPropNames","variants","overrides","forNode","ph","Object","assign","args","className","classNames","projectcss","as","hasGap","Button","color","PlasmicCtaBottom__RenderFunc","displayName","PlasmicCtaBottom","internalVariantProps","internalArgProps","CtaBottom_","ref","endIconContainer","endIconContainershowEndIcon","root___focusVisibleWithin","rootcolor_dark","slotTargetEndIconcolor_dark","slotTargetEndIconshowEndIcon","slotTargetStartIconcolor_dark","slotTargetStartIconshowStartIcon","startIconContainer","startIconContainer___focusVisibleWithin","startIconContainershowStartIcon","svg__v4Tdi","svg__vlAun","PlasmicTextInput__VariantProps","PlasmicTextInput__ArgProps","placeholder","useTrigger","isTextInput","isRootFocusVisibleWithin","triggerRootFocusVisibleWithinProps","triggers","focusVisibleWithin_root","sty","hasVariant","p","defaultContents","role","value","startIcon","endIcon","PlasmicTextInput__RenderFunc","PlasmicTextInput","useBehavior","pp","showStartIconVariant","group","variant","showEndIconVariant","isDisabledVariant","startIconSlot","endIconSlot","input","TextInput_","plasmicProps","TextInput","__plumeType","style","title","restProps","xmlns","fill","viewBox","height","width","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","PlasmicWhyUs__VariantProps","PlasmicWhyUs__ArgProps","header","pageBanerSection","h1","section","columns","textInput","companiesSection","container2","ctaBottom","footer","ensureGlobalVariants","screen","useScreenVariantsxe8Uhzv7PeLJgW","Header","alt","displayHeight","displayMaxHeight","displayMaxWidth","displayMinHeight","displayMinWidth","displayWidth","loading","src","cogsjpgYt6Exh67K","fullWidth","fullHeight","aspectRatio","undefined","valuePriceScalepngXLb8To3Wt","CtaBottom","Footer","PlasmicWhyUs__RenderFunc","PlasmicWhyUs"],"sourceRoot":""}