// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sSe8AoDiAW5DkmycE76RKb
// Component: gnX8DPADyQ
import * as React from "react"
import * as p from "@plasmicapp/react-web"
import * as ph from "@plasmicapp/host"
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web"
import Header from "../../Header" // plasmic-import: rlLZVswJyeOUp/component
import Footer from "../../Footer" // plasmic-import: aKMJC5Su_PgNb/component
import "@plasmicapp/react-web/lib/plasmic.css"
import * as projectcss from "./plasmic_rva_new.module.css" // plasmic-import: sSe8AoDiAW5DkmycE76RKb/projectcss
import * as sty from "./PlasmicHome2.module.css" // plasmic-import: gnX8DPADyQ/css

export const PlasmicHome2__VariantProps = new Array()

export const PlasmicHome2__ArgProps = new Array()

function PlasmicHome2__RenderFunc(props) {
  const { variants, overrides, forNode } = props
  const $ctx = ph.useDataEnv?.() || {}
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args])
  const $props = args
  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root2"}
          data-plasmic-override={overrides.root2}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root2
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          {true ? (
            <div
              data-plasmic-name={"hero"}
              data-plasmic-override={overrides.hero}
              className={classNames(projectcss.all, sty.hero)}
            />
          ) : null}
          {true ? (
            <div
              data-plasmic-name={"companiesSection"}
              data-plasmic-override={overrides.companiesSection}
              className={classNames(projectcss.all, sty.companiesSection)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"container2"}
                data-plasmic-override={overrides.container2}
                hasGap={true}
                className={classNames(projectcss.all, sty.container2)}
              >
                <h2
                  data-plasmic-name={"h2"}
                  data-plasmic-override={overrides.h2}
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2
                  )}
                >
                  {"We work with local businesses"}
                </h2>

                <div
                  className={classNames(projectcss.all, sty.freeBox___76Q6W)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__iv4Gq)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__dgC4A)}
                      displayHeight={"48px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"none"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      src={
                        "https://plasmic-ray.s3.us-west-2.amazonaws.com/logo-strapi.svg"
                      }
                    />

                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__oclcb)}
                      displayHeight={"48px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"none"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      src={
                        "https://plasmic-ray.s3.us-west-2.amazonaws.com/logo-segment.svg"
                      }
                    />

                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__zgQmi)}
                      displayHeight={"48px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"none"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      src={
                        "https://plasmic-ray.s3.us-west-2.amazonaws.com/logo-xstate.svg"
                      }
                    />

                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__wwNjX)}
                      displayHeight={"48px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"none"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      src={
                        "https://plasmic-ray.s3.us-west-2.amazonaws.com/logo-mapbox.svg"
                      }
                    />
                  </p.Stack>
                </div>
              </p.Stack>
            </div>
          ) : null}
          {true ? (
            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer)}
            />
          ) : null}
        </p.Stack>
      </div>
    </React.Fragment>
  )
}

const PlasmicDescendants = {
  root2: [
    "root2",
    "header",
    "hero",
    "companiesSection",
    "container2",
    "h2",
    "footer",
  ],

  header: ["header"],
  hero: ["hero"],
  companiesSection: ["companiesSection", "container2", "h2"],
  container2: ["container2", "h2"],
  h2: ["h2"],
  footer: ["footer"],
}

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHome2__ArgProps,
          internalVariantPropNames: PlasmicHome2__VariantProps,
        }),

      [props, nodeName]
    )

    return PlasmicHome2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    })
  }
  if (nodeName === "root2") {
    func.displayName = "PlasmicHome2"
  } else {
    func.displayName = `PlasmicHome2.${nodeName}`
  }
  return func
}

export const PlasmicHome2 = Object.assign(
  // Top-level PlasmicHome2 renders the root element
  makeNodeComponent("root2"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    hero: makeNodeComponent("hero"),
    companiesSection: makeNodeComponent("companiesSection"),
    container2: makeNodeComponent("container2"),
    h2: makeNodeComponent("h2"),
    footer: makeNodeComponent("footer"),
    // Metadata about props expected for PlasmicHome2
    internalVariantProps: PlasmicHome2__VariantProps,
    internalArgProps: PlasmicHome2__ArgProps,
  }
)

export default PlasmicHome2
/* prettier-ignore-end */
