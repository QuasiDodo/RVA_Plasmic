// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sSe8AoDiAW5DkmycE76RKb
// Component: EgVjH3shVXgCZy
import * as React from "react"
import * as p from "@plasmicapp/react-web"
import * as ph from "@plasmicapp/host"
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web"
import Header from "../../Header" // plasmic-import: rlLZVswJyeOUp/component
import TextInput from "../../TextInput" // plasmic-import: 8d2n861ybhR/component
import CtaBottom from "../../CtaBottom" // plasmic-import: aZrFk0trqYG6jU/component
import Footer from "../../Footer" // plasmic-import: aKMJC5Su_PgNb/component
import { useScreenVariants as useScreenVariantsxe8Uhzv7PeLJgW } from "./PlasmicGlobalVariant__Screen" // plasmic-import: XE8Uhzv7PeLJgW/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css"
import * as projectcss from "./plasmic_rva_new.module.css" // plasmic-import: sSe8AoDiAW5DkmycE76RKb/projectcss
import * as sty from "./PlasmicWhyUs.module.css" // plasmic-import: EgVjH3shVXgCZy/css
import cogsjpgYt6Exh67K from "./images/cogsjpg.jpeg" // plasmic-import: YT6exh67K/picture
import valuePriceScalepngXLb8To3Wt from "./images/valuePriceScalepng.png" // plasmic-import: XLb8to3Wt/picture

export const PlasmicWhyUs__VariantProps = new Array()

export const PlasmicWhyUs__ArgProps = new Array()

function PlasmicWhyUs__RenderFunc(props) {
  const { variants, overrides, forNode } = props
  const $ctx = ph.useDataEnv?.() || {}
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args])
  const $props = args
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsxe8Uhzv7PeLJgW(),
  })

  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <div
            data-plasmic-name={"pageBanerSection"}
            data-plasmic-override={overrides.pageBanerSection}
            className={classNames(projectcss.all, sty.pageBanerSection)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__tudKw)}>
              <h1
                data-plasmic-name={"h1"}
                data-plasmic-override={overrides.h1}
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1
                )}
              >
                {"Why us"}
              </h1>
            </div>
          </div>

          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__eu1Qn)}>
              <div className={classNames(projectcss.all, sty.columns__g1VeZ)}>
                <div className={classNames(projectcss.all, sty.column__oUaYi)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__aXbkT)}
                  >
                    <h2
                      data-plasmic-name={"h2"}
                      data-plasmic-override={overrides.h2}
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2
                      )}
                    >
                      {"We are practicioners"}
                    </h2>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__q6O8K
                      )}
                    >
                      {
                        "We have a combination of consulting and line management experience"
                      }
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___75Ee1
                      )}
                    >
                      {
                        "We intimately understand the business levers and make things happen\n\nWe have a pragmatic approach to decision making and test and learn\n\nWe assist on the strategy definition but also are involved in delivering and implementing solutions\n\nWe identify capability gaps and mentor our clients to fill those gaps\n"
                      }
                    </div>
                  </p.Stack>
                </div>

                <div className={classNames(projectcss.all, sty.column__hz6G9)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__reLaD)}
                    displayHeight={"100%"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    loading={"lazy"}
                    src={{
                      src: cogsjpgYt6Exh67K,
                      fullWidth: 5655,
                      fullHeight: 3775,
                      aspectRatio: undefined,
                    }}
                  />
                </div>
              </div>
            </div>

            <TextInput
              data-plasmic-name={"textInput"}
              data-plasmic-override={overrides.textInput}
              className={classNames("__wab_instance", sty.textInput)}
            />

            <div className={classNames(projectcss.all, sty.freeBox__fuJm2)}>
              <div className={classNames(projectcss.all, sty.columns__lv0Ws)}>
                <div className={classNames(projectcss.all, sty.column___8OsXy)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__qrtG4)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: valuePriceScalepngXLb8To3Wt,
                      fullWidth: 613,
                      fullHeight: 352,
                      aspectRatio: undefined,
                    }}
                  />
                </div>

                <div className={classNames(projectcss.all, sty.column___2ACH)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__a9Dx3
                    )}
                  >
                    {
                      "We are good value\n\nWe are more cost effective than global/major consulting firms\n\nWe offer substantial senior team involvement in projects execution\n\nAbility – and price point – to deliver client value for both strategic and implementation engagements\n"
                    }
                  </div>
                </div>
              </div>
            </div>
          </section>

          <CtaBottom
            data-plasmic-name={"ctaBottom"}
            data-plasmic-override={overrides.ctaBottom}
            className={classNames("__wab_instance", sty.ctaBottom)}
          />

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </p.Stack>
      </div>
    </React.Fragment>
  )
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "pageBanerSection",
    "h1",
    "section",
    "h2",
    "textInput",
    "textbox",
    "ctaBottom",
    "footer",
  ],

  header: ["header"],
  pageBanerSection: ["pageBanerSection", "h1"],
  h1: ["h1"],
  section: ["section", "h2", "textInput", "textbox"],
  h2: ["h2"],
  textInput: ["textInput", "textbox"],
  ctaBottom: ["ctaBottom"],
  footer: ["footer"],
}

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicWhyUs__ArgProps,
          internalVariantPropNames: PlasmicWhyUs__VariantProps,
        }),

      [props, nodeName]
    )

    return PlasmicWhyUs__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicWhyUs"
  } else {
    func.displayName = `PlasmicWhyUs.${nodeName}`
  }
  return func
}

export const PlasmicWhyUs = Object.assign(
  // Top-level PlasmicWhyUs renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    pageBanerSection: makeNodeComponent("pageBanerSection"),
    h1: makeNodeComponent("h1"),
    section: makeNodeComponent("section"),
    h2: makeNodeComponent("h2"),
    textInput: makeNodeComponent("textInput"),
    ctaBottom: makeNodeComponent("ctaBottom"),
    footer: makeNodeComponent("footer"),
    // Metadata about props expected for PlasmicWhyUs
    internalVariantProps: PlasmicWhyUs__VariantProps,
    internalArgProps: PlasmicWhyUs__ArgProps,
  }
)

export default PlasmicWhyUs
/* prettier-ignore-end */
