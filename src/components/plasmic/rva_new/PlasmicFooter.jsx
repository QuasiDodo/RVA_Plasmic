// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sSe8AoDiAW5DkmycE76RKb
// Component: aKMJC5Su_PgNb
import * as React from "react"
import { Link } from "gatsby"
import * as p from "@plasmicapp/react-web"
import * as ph from "@plasmicapp/host"
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web"
import "@plasmicapp/react-web/lib/plasmic.css"
import * as projectcss from "./plasmic_rva_new.module.css" // plasmic-import: sSe8AoDiAW5DkmycE76RKb/projectcss
import * as sty from "./PlasmicFooter.module.css" // plasmic-import: aKMJC5Su_PgNb/css
import IconIcon from "./icons/PlasmicIcon__Icon" // plasmic-import: A8bnkBjJqVCwJ9/icon
import FacebookIconsvgIcon from "./icons/PlasmicIcon__FacebookIconsvg" // plasmic-import: uReSR94qZIhNBx/icon
import LinkedinsvgIcon from "./icons/PlasmicIcon__Linkedinsvg" // plasmic-import: Fm08GCOPSM/icon

export const PlasmicFooter__VariantProps = new Array()

export const PlasmicFooter__ArgProps = new Array()

function PlasmicFooter__RenderFunc(props) {
  const { variants, overrides, forNode } = props
  const $ctx = ph.useDataEnv?.() || {}
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args])
  const $props = args
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__ndNpz)}
      >
        {true ? (
          <h3
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames(
              projectcss.all,
              projectcss.h3,
              projectcss.__wab_text,
              sty.header
            )}
          >
            <React.Fragment>
              <React.Fragment>{""}</React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ color: "#FFFFFF" }}
              >
                {"Real Value Added Consulting"}
              </span>
              <React.Fragment>{""}</React.Fragment>
            </React.Fragment>
          </h3>
        ) : null}

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___1ELw7)}
        >
          <p.Stack
            as={p.PlasmicLink}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__iNhcf
            )}
            component={Link}
            platform={"gatsby"}
          >
            {false ? (
              <IconIcon
                className={classNames(projectcss.all, sty.svg__tTqBp)}
                role={"img"}
              />
            ) : null}

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ioiqe
              )}
            >
              {"What we do"}
            </div>

            {false ? (
              <IconIcon
                className={classNames(projectcss.all, sty.svg__eTvBx)}
                role={"img"}
              />
            ) : null}
          </p.Stack>

          <p.Stack
            as={p.PlasmicLink}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__f9CjY
            )}
            component={Link}
            platform={"gatsby"}
          >
            {false ? (
              <IconIcon
                className={classNames(projectcss.all, sty.svg__jq9Ck)}
                role={"img"}
              />
            ) : null}

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__qvqPl
              )}
            >
              {"About us"}
            </div>

            {false ? (
              <IconIcon
                className={classNames(projectcss.all, sty.svg___8T33)}
                role={"img"}
              />
            ) : null}
          </p.Stack>

          <p.Stack
            as={p.PlasmicLink}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__kZEuU
            )}
            component={Link}
            platform={"gatsby"}
          >
            {true ? (
              <IconIcon
                className={classNames(projectcss.all, sty.svg__mOoOb)}
                role={"img"}
              />
            ) : null}

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__i2Vm6
              )}
            >
              {"Why us"}
            </div>

            {true ? (
              <IconIcon
                className={classNames(projectcss.all, sty.svg__yHoqb)}
                role={"img"}
              />
            ) : null}
          </p.Stack>

          <p.Stack
            as={p.PlasmicLink}
            hasGap={true}
            className={classNames(projectcss.all, projectcss.a, sty.link__hfHy)}
            component={Link}
            platform={"gatsby"}
          >
            {false ? (
              <IconIcon
                className={classNames(projectcss.all, sty.svg__vGt7N)}
                role={"img"}
              />
            ) : null}

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__eMcJv
              )}
            >
              {"Our team"}
            </div>

            {false ? (
              <IconIcon
                className={classNames(projectcss.all, sty.svg__u1W6R)}
                role={"img"}
              />
            ) : null}
          </p.Stack>

          <p.Stack
            as={p.PlasmicLink}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link___5Q65U
            )}
            component={Link}
            platform={"gatsby"}
          >
            {false ? (
              <IconIcon
                className={classNames(projectcss.all, sty.svg__jtH8T)}
                role={"img"}
              />
            ) : null}

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___6EqAo
              )}
            >
              {"Contact us"}
            </div>

            {false ? (
              <IconIcon
                className={classNames(projectcss.all, sty.svg__mzpAu)}
                role={"img"}
              />
            ) : null}
          </p.Stack>
        </p.Stack>
      </p.Stack>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__zam8P)}
      >
        {true ? (
          <p.PlasmicLink
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__a3OYg
            )}
            component={Link}
            href={"https://www.facebook.com/RealValueAdded"}
            platform={"gatsby"}
            target={"_blank"}
          >
            <FacebookIconsvgIcon
              className={classNames(projectcss.all, sty.svg__zIdCo)}
              role={"img"}
            />
          </p.PlasmicLink>
        ) : null}
        {true ? (
          <p.PlasmicLink
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__xBTy6
            )}
            component={Link}
            href={"https://www.linkedin.com/company/rvaconsulting"}
            platform={"gatsby"}
            target={"_blank"}
          >
            <LinkedinsvgIcon
              className={classNames(projectcss.all, sty.svg__j6Ryd)}
              role={"img"}
            />
          </p.PlasmicLink>
        ) : null}

        <p.PlasmicLink
          className={classNames(
            projectcss.all,
            projectcss.a,
            projectcss.__wab_text,
            sty.link___9VjjB
          )}
          component={Link}
          platform={"gatsby"}
        >
          <React.Fragment>
            <React.Fragment>
              {
                "Copyright Â©Real Value Added Consulting2022. All Rights Reserved. Use of this website is subject to our "
              }
            </React.Fragment>
            {
              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  projectcss.plasmic_default__inline,
                  sty.link__tsky0
                )}
                component={Link}
                href={"/disclaimer"}
                platform={"gatsby"}
              >
                {"Terms of Use"}
              </p.PlasmicLink>
            }

            <React.Fragment>{" and  "}</React.Fragment>
            {
              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  projectcss.plasmic_default__inline,
                  sty.link__k4IJf
                )}
                component={Link}
                href={"/privacy-policy"}
                platform={"gatsby"}
              >
                {"Privacy Policy"}
              </p.PlasmicLink>
            }

            <React.Fragment>{""}</React.Fragment>
          </React.Fragment>
        </p.PlasmicLink>
      </p.Stack>
    </div>
  )
}

const PlasmicDescendants = {
  root: ["root", "header"],
  header: ["header"],
}

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicFooter__ArgProps,
          internalVariantPropNames: PlasmicFooter__VariantProps,
        }),

      [props, nodeName]
    )

    return PlasmicFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicFooter"
  } else {
    func.displayName = `PlasmicFooter.${nodeName}`
  }
  return func
}

export const PlasmicFooter = Object.assign(
  // Top-level PlasmicFooter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    // Metadata about props expected for PlasmicFooter
    internalVariantProps: PlasmicFooter__VariantProps,
    internalArgProps: PlasmicFooter__ArgProps,
  }
)

export default PlasmicFooter
/* prettier-ignore-end */
